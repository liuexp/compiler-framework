
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 10 13:28:16 HKT 2012
//----------------------------------------------------

package javac.parser;

import java.io.InputStream;
import javac.absyn.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 10 13:28:16 HKT 2012
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\005\000\002\005\007\000\002\005\006\000" +
    "\002\006\007\000\002\007\003\000\002\007\004\000\002" +
    "\010\007\000\002\010\006\000\002\011\003\000\002\011" +
    "\005\000\002\012\004\000\002\013\005\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\004\000\002\015\003\000\002\015\005\000\002" +
    "\016\003\000\002\016\004\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\020\005\000\002\020\004\000\002\021\004\000" +
    "\002\022\007\000\002\022\011\000\002\023\007\000\002" +
    "\023\011\000\002\023\010\000\002\023\011\000\002\023" +
    "\010\000\002\023\011\000\002\023\010\000\002\023\011" +
    "\000\002\023\010\000\002\024\005\000\002\024\004\000" +
    "\002\024\004\000\002\025\003\000\002\025\005\000\002" +
    "\027\003\000\002\027\005\000\002\030\003\000\002\030" +
    "\005\000\002\031\003\000\002\031\005\000\002\032\003" +
    "\000\002\032\005\000\002\032\005\000\002\033\003\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\034\003\000\002\034\005\000\002\034" +
    "\005\000\002\035\003\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\036\003\000\002\036\004\000" +
    "\002\036\004\000\002\036\004\000\002\026\003\000\002" +
    "\026\005\000\002\037\003\000\002\037\006\000\002\037" +
    "\006\000\002\037\005\000\002\037\005\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\005\000\002\040\007\000\002" +
    "\040\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\016\004\007\005\010\007\004\010\011\011" +
    "\020\054\014\001\002\000\060\022\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef\052\uffef\054" +
    "\uffef\001\002\000\004\023\054\001\002\000\020\002\ufffe" +
    "\004\ufffe\005\ufffe\007\ufffe\010\ufffe\011\ufffe\054\ufffe\001" +
    "\002\000\012\007\004\010\011\011\020\054\014\001\002" +
    "\000\004\054\036\001\002\000\060\022\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043" +
    "\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\052\uffee" +
    "\054\uffee\001\002\000\020\002\034\004\007\005\010\007" +
    "\004\010\011\011\020\054\014\001\002\000\020\002\ufffd" +
    "\004\ufffd\005\ufffd\007\ufffd\010\ufffd\011\ufffd\054\ufffd\001" +
    "\002\000\060\022\uffec\025\uffec\026\uffec\027\uffec\030\uffec" +
    "\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037" +
    "\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec" +
    "\046\uffec\047\uffec\050\uffec\052\uffec\054\uffec\001\002\000" +
    "\006\031\022\054\021\001\002\000\020\002\ufffc\004\ufffc" +
    "\005\ufffc\007\ufffc\010\ufffc\011\ufffc\054\ufffc\001\002\000" +
    "\020\002\000\004\000\005\000\007\000\010\000\011\000" +
    "\054\000\001\002\000\060\022\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044" +
    "\uffed\045\uffed\046\uffed\047\uffed\050\uffed\052\uffed\054\uffed" +
    "\001\002\000\004\027\023\001\002\000\060\022\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042" +
    "\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb" +
    "\052\uffeb\054\uffeb\001\002\000\014\007\004\010\011\011" +
    "\020\030\025\054\014\001\002\000\006\030\ufff3\032\ufff3" +
    "\001\002\000\006\022\ufff4\023\ufff4\001\002\000\006\030" +
    "\032\032\031\001\002\000\006\031\022\054\030\001\002" +
    "\000\006\030\ufff1\032\ufff1\001\002\000\012\007\004\010" +
    "\011\011\020\054\014\001\002\000\006\022\ufff5\023\ufff5" +
    "\001\002\000\006\030\ufff2\032\ufff2\001\002\000\004\002" +
    "\001\001\002\000\020\002\uffff\004\uffff\005\uffff\007\uffff" +
    "\010\uffff\011\uffff\054\uffff\001\002\000\004\023\037\001" +
    "\002\000\012\007\004\010\011\011\020\054\014\001\002" +
    "\000\054\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\023\ufff7" +
    "\024\ufff7\027\ufff7\044\ufff7\045\ufff7\051\ufff7\053\ufff7\054" +
    "\ufff7\055\ufff7\056\ufff7\001\002\000\014\007\004\010\011" +
    "\011\020\024\051\054\014\001\002\000\006\031\022\054" +
    "\043\001\002\000\006\022\uffea\032\uffea\001\002\000\006" +
    "\022\046\032\045\001\002\000\004\054\047\001\002\000" +
    "\054\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\023\ufff0\024" +
    "\ufff0\027\ufff0\044\ufff0\045\ufff0\051\ufff0\053\ufff0\054\ufff0" +
    "\055\ufff0\056\ufff0\001\002\000\006\022\uffe9\032\uffe9\001" +
    "\002\000\054\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\023" +
    "\ufff6\024\ufff6\027\ufff6\044\ufff6\045\ufff6\051\ufff6\053\ufff6" +
    "\054\ufff6\055\ufff6\056\ufff6\001\002\000\020\002\ufff8\004" +
    "\ufff8\005\ufff8\007\ufff8\010\ufff8\011\ufff8\054\ufff8\001\002" +
    "\000\004\022\053\001\002\000\020\002\ufffb\004\ufffb\005" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\054\ufffb\001\002\000\052" +
    "\006\106\007\004\010\011\011\020\012\110\013\077\015" +
    "\115\016\063\017\101\020\111\021\060\023\114\027\057" +
    "\044\076\045\064\051\067\053\056\054\100\055\055\056" +
    "\065\001\002\000\054\022\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037" +
    "\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa" +
    "\046\uffaa\047\uffaa\050\uffaa\052\uffaa\001\002\000\054\022" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\032\uffac\033\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\052\uffac\001\002\000\026\006\106\012\110\027\057\044" +
    "\076\045\064\051\067\053\056\054\123\055\055\056\065" +
    "\001\002\000\004\022\264\001\002\000\050\006\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\023\uffe4\024\uffe4\027\uffe4\044\uffe4\045\uffe4\051" +
    "\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\001\002\000\036" +
    "\022\uffc5\026\uffc5\030\uffc5\032\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\147" +
    "\045\150\001\002\000\004\027\231\001\002\000\026\006" +
    "\106\012\110\027\057\044\076\045\064\051\067\053\056" +
    "\054\123\055\055\056\065\001\002\000\054\022\uffab\025" +
    "\uffab\026\uffab\027\uffab\030\uffab\032\uffab\033\uffab\034\uffab" +
    "\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043" +
    "\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\052\uffab" +
    "\001\002\000\014\022\uffcc\026\uffcc\030\uffcc\032\uffcc\034" +
    "\226\001\002\000\026\006\106\012\110\027\057\044\076" +
    "\045\064\051\067\053\056\054\123\055\055\056\065\001" +
    "\002\000\046\022\uffbd\026\uffbd\030\uffbd\032\uffbd\033\223" +
    "\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\001\002\000\052\006\106\007\004\010\011\011\020\012" +
    "\110\013\077\015\115\016\063\017\101\020\111\021\060" +
    "\023\114\027\057\044\076\045\064\051\067\053\056\054" +
    "\100\055\055\056\065\001\002\000\054\022\uffb9\025\206" +
    "\026\uffb9\027\205\030\uffb9\032\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\052\207\001" +
    "\002\000\050\006\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\021\uffe2\023\uffe2\024\uffe2\027" +
    "\uffe2\044\uffe2\045\uffe2\051\uffe2\053\uffe2\054\uffe2\055\uffe2" +
    "\056\uffe2\001\002\000\050\006\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\023\uffe6" +
    "\024\uffe6\027\uffe6\044\uffe6\045\uffe6\051\uffe6\053\uffe6\054" +
    "\uffe6\055\uffe6\056\uffe6\001\002\000\054\022\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3" +
    "\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\052\uffb3\001" +
    "\002\000\026\006\106\012\110\027\057\044\076\045\064" +
    "\051\067\053\056\054\123\055\055\056\065\001\002\000" +
    "\004\027\176\001\002\000\054\022\uffae\025\uffae\027\uffae" +
    "\031\uffec\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037" +
    "\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae" +
    "\046\uffae\047\uffae\050\uffae\052\uffae\054\uffec\001\002\000" +
    "\026\006\106\012\110\027\057\044\076\045\064\051\067" +
    "\053\056\054\123\055\055\056\065\001\002\000\012\022" +
    "\uffd0\026\uffd0\030\uffd0\032\uffd0\001\002\000\012\022\uffce" +
    "\026\uffce\030\uffce\032\uffce\001\002\000\032\022\uffc8\026" +
    "\uffc8\030\uffc8\032\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\144\041\143\042\142\043\145\001\002\000\050\006" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\023\uffe5\024\uffe5\027\uffe5\044\uffe5\045" +
    "\uffe5\051\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\001\002" +
    "\000\012\007\004\010\011\011\020\054\014\001\002\000" +
    "\044\022\uffc0\026\uffc0\030\uffc0\032\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\046\154\047\153\050\152\001\002\000\054" +
    "\022\uffad\025\uffad\026\uffad\027\uffad\030\uffad\032\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050" +
    "\uffad\052\uffad\001\002\000\004\022\167\001\002\000\046" +
    "\006\106\012\110\013\077\015\115\016\063\017\101\020" +
    "\111\021\060\023\114\024\166\027\057\044\076\045\064" +
    "\051\067\053\056\054\123\055\055\056\065\001\002\000" +
    "\022\022\uffca\026\uffca\030\uffca\032\uffca\034\uffca\035\136" +
    "\036\135\037\137\001\002\000\046\006\106\012\110\013" +
    "\077\015\115\016\063\017\101\020\111\021\060\023\114" +
    "\024\132\027\057\044\076\045\064\051\067\053\056\054" +
    "\123\055\055\056\065\001\002\000\004\027\125\001\002" +
    "\000\006\022\122\032\121\001\002\000\050\006\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\023\uffe3\024\uffe3\027\uffe3\044\uffe3\045\uffe3\051" +
    "\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\001\002\000\046" +
    "\006\uffe8\012\uffe8\013\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\023\uffe8\024\uffe8\027\uffe8\044\uffe8\045\uffe8" +
    "\051\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\001\002\000" +
    "\026\006\106\012\110\027\057\044\076\045\064\051\067" +
    "\053\056\054\123\055\055\056\065\001\002\000\054\006" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\027\uffdf\030" +
    "\uffdf\044\uffdf\045\uffdf\051\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\001\002\000\054\022\uffae\025\uffae\026\uffae\027" +
    "\uffae\030\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae" +
    "\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045" +
    "\uffae\046\uffae\047\uffae\050\uffae\052\uffae\001\002\000\012" +
    "\022\uffcf\026\uffcf\030\uffcf\032\uffcf\001\002\000\026\006" +
    "\106\012\110\027\057\044\076\045\064\051\067\053\056" +
    "\054\123\055\055\056\065\001\002\000\006\030\127\032" +
    "\121\001\002\000\044\006\106\012\110\013\077\015\115" +
    "\016\063\017\101\020\111\021\060\023\114\027\057\044" +
    "\076\045\064\051\067\053\056\054\123\055\055\056\065" +
    "\001\002\000\050\006\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\023\uffdc\024\uffdc" +
    "\027\uffdc\044\uffdc\045\uffdc\051\uffdc\053\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\001\002\000\046\006\106\012\110\013\077" +
    "\015\115\016\063\017\101\020\111\021\060\023\114\024" +
    "\133\027\057\044\076\045\064\051\067\053\056\054\123" +
    "\055\055\056\065\001\002\000\050\006\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\023\uffe0\024\uffe0\027\uffe0\044\uffe0\045\uffe0\051\uffe0\053" +
    "\uffe0\054\uffe0\055\uffe0\056\uffe0\001\002\000\050\006\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\023\uffe1\024\uffe1\027\uffe1\044\uffe1\045\uffe1" +
    "\051\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\001\002\000" +
    "\046\006\uffe7\012\uffe7\013\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\023\uffe7\024\uffe7\027\uffe7\044\uffe7\045" +
    "\uffe7\051\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\001\002" +
    "\000\026\006\106\012\110\027\057\044\076\045\064\051" +
    "\067\053\056\054\123\055\055\056\065\001\002\000\026" +
    "\006\106\012\110\027\057\044\076\045\064\051\067\053" +
    "\056\054\123\055\055\056\065\001\002\000\026\006\106" +
    "\012\110\027\057\044\076\045\064\051\067\053\056\054" +
    "\123\055\055\056\065\001\002\000\032\022\uffc6\026\uffc6" +
    "\030\uffc6\032\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\144\041\143\042\142\043\145\001\002\000\044\022\uffbd" +
    "\026\uffbd\030\uffbd\032\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\050\uffbd\001\002\000\026\006\106\012" +
    "\110\027\057\044\076\045\064\051\067\053\056\054\123" +
    "\055\055\056\065\001\002\000\026\006\106\012\110\027" +
    "\057\044\076\045\064\051\067\053\056\054\123\055\055" +
    "\056\065\001\002\000\026\006\106\012\110\027\057\044" +
    "\076\045\064\051\067\053\056\054\123\055\055\056\065" +
    "\001\002\000\026\006\106\012\110\027\057\044\076\045" +
    "\064\051\067\053\056\054\123\055\055\056\065\001\002" +
    "\000\036\022\uffc1\026\uffc1\030\uffc1\032\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\044\147\045\150\001\002\000\026\006\106\012\110\027" +
    "\057\044\076\045\064\051\067\053\056\054\123\055\055" +
    "\056\065\001\002\000\026\006\106\012\110\027\057\044" +
    "\076\045\064\051\067\053\056\054\123\055\055\056\065" +
    "\001\002\000\044\022\uffbe\026\uffbe\030\uffbe\032\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\154\047\153\050\152\001" +
    "\002\000\026\006\106\012\110\027\057\044\076\045\064" +
    "\051\067\053\056\054\123\055\055\056\065\001\002\000" +
    "\026\006\106\012\110\027\057\044\076\045\064\051\067" +
    "\053\056\054\123\055\055\056\065\001\002\000\026\006" +
    "\106\012\110\027\057\044\076\045\064\051\067\053\056" +
    "\054\123\055\055\056\065\001\002\000\044\022\uffbc\026" +
    "\uffbc\030\uffbc\032\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\001\002\000\044\022\uffbb\026\uffbb" +
    "\030\uffbb\032\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\001\002\000\044\022\uffba\026\uffba\030" +
    "\uffba\032\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047" +
    "\uffba\050\uffba\001\002\000\044\022\uffbf\026\uffbf\030\uffbf" +
    "\032\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\154\047\153" +
    "\050\152\001\002\000\036\022\uffc4\026\uffc4\030\uffc4\032" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\147\045\150\001\002\000\036\022" +
    "\uffc3\026\uffc3\030\uffc3\032\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\147\045" +
    "\150\001\002\000\036\022\uffc2\026\uffc2\030\uffc2\032\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\147\045\150\001\002\000\014\022\uffc9" +
    "\026\uffc9\030\uffc9\032\uffc9\034\uffc9\001\002\000\032\022" +
    "\uffc7\026\uffc7\030\uffc7\032\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\144\041\143\042\142\043\145\001\002\000" +
    "\020\002\ufff9\004\ufff9\005\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\054\ufff9\001\002\000\050\006\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\023\uffd2" +
    "\024\uffd2\027\uffd2\044\uffd2\045\uffd2\051\uffd2\053\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\001\002\000\056\022\uffa7\025\171" +
    "\026\uffa7\027\uffa7\030\uffa7\031\022\032\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\052" +
    "\uffa7\001\002\000\026\006\106\012\110\027\057\044\076" +
    "\045\064\051\067\053\056\054\123\055\055\056\065\001" +
    "\002\000\006\026\173\032\121\001\002\000\054\022\uffa8" +
    "\025\uffa8\026\uffa8\027\uffa8\030\uffa8\032\uffa8\033\uffa8\034" +
    "\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8" +
    "\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\052" +
    "\uffa8\001\002\000\006\022\175\032\121\001\002\000\050" +
    "\006\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\023\uffd3\024\uffd3\027\uffd3\044\uffd3" +
    "\045\uffd3\051\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\001" +
    "\002\000\026\006\106\012\110\027\057\044\076\045\064" +
    "\051\067\053\056\054\123\055\055\056\065\001\002\000" +
    "\006\030\200\032\121\001\002\000\044\006\106\012\110" +
    "\013\077\015\115\016\063\017\101\020\111\021\060\023" +
    "\114\027\057\044\076\045\064\051\067\053\056\054\123" +
    "\055\055\056\065\001\002\000\050\006\uffde\012\uffde\013" +
    "\uffde\014\202\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\023\uffde\024\uffde\027\uffde\044\uffde\045\uffde\051\uffde\053" +
    "\uffde\054\uffde\055\uffde\056\uffde\001\002\000\044\006\106" +
    "\012\110\013\077\015\115\016\063\017\101\020\111\021" +
    "\060\023\114\027\057\044\076\045\064\051\067\053\056" +
    "\054\123\055\055\056\065\001\002\000\050\006\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\023\uffdd\024\uffdd\027\uffdd\044\uffdd\045\uffdd\051" +
    "\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\001\002\000\046" +
    "\022\uffb8\026\uffb8\030\uffb8\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\001\002\000" +
    "\030\006\106\012\110\027\057\030\213\044\076\045\064" +
    "\051\067\053\056\054\123\055\055\056\065\001\002\000" +
    "\026\006\106\012\110\027\057\044\076\045\064\051\067" +
    "\053\056\054\123\055\055\056\065\001\002\000\004\054" +
    "\210\001\002\000\054\022\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\052\uffaf\001\002\000\006\026" +
    "\212\032\121\001\002\000\054\022\uffb2\025\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2" +
    "\045\uffb2\046\uffb2\047\uffb2\050\uffb2\052\uffb2\001\002\000" +
    "\054\022\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0" +
    "\050\uffb0\052\uffb0\001\002\000\006\030\uffb5\032\uffb5\001" +
    "\002\000\006\030\217\032\216\001\002\000\026\006\106" +
    "\012\110\027\057\044\076\045\064\051\067\053\056\054" +
    "\123\055\055\056\065\001\002\000\054\022\uffb1\025\uffb1" +
    "\026\uffb1\027\uffb1\030\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1" +
    "\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\052\uffb1\001" +
    "\002\000\006\030\uffb4\032\uffb4\001\002\000\046\006\106" +
    "\012\110\013\077\015\115\016\063\017\101\020\111\021" +
    "\060\023\114\024\222\027\057\044\076\045\064\051\067" +
    "\053\056\054\123\055\055\056\065\001\002\000\020\002" +
    "\ufffa\004\ufffa\005\ufffa\007\ufffa\010\ufffa\011\ufffa\054\ufffa" +
    "\001\002\000\026\006\106\012\110\027\057\044\076\045" +
    "\064\051\067\053\056\054\123\055\055\056\065\001\002" +
    "\000\012\022\uffcd\026\uffcd\030\uffcd\032\uffcd\001\002\000" +
    "\046\022\uffb6\026\uffb6\030\uffb6\032\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\001\002" +
    "\000\026\006\106\012\110\027\057\044\076\045\064\051" +
    "\067\053\056\054\123\055\055\056\065\001\002\000\012" +
    "\022\uffcb\026\uffcb\030\uffcb\032\uffcb\001\002\000\046\022" +
    "\uffb7\026\uffb7\030\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\001\002\000\030" +
    "\006\106\012\110\022\232\027\057\044\076\045\064\051" +
    "\067\053\056\054\123\055\055\056\065\001\002\000\030" +
    "\006\106\012\110\022\250\027\057\044\076\045\064\051" +
    "\067\053\056\054\123\055\055\056\065\001\002\000\030" +
    "\006\106\012\110\022\234\027\057\044\076\045\064\051" +
    "\067\053\056\054\123\055\055\056\065\001\002\000\030" +
    "\006\106\012\110\027\057\030\244\044\076\045\064\051" +
    "\067\053\056\054\123\055\055\056\065\001\002\000\030" +
    "\006\106\012\110\027\057\030\237\044\076\045\064\051" +
    "\067\053\056\054\123\055\055\056\065\001\002\000\006" +
    "\030\241\032\121\001\002\000\044\006\106\012\110\013" +
    "\077\015\115\016\063\017\101\020\111\021\060\023\114" +
    "\027\057\044\076\045\064\051\067\053\056\054\123\055" +
    "\055\056\065\001\002\000\050\006\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\023" +
    "\uffda\024\uffda\027\uffda\044\uffda\045\uffda\051\uffda\053\uffda" +
    "\054\uffda\055\uffda\056\uffda\001\002\000\044\006\106\012" +
    "\110\013\077\015\115\016\063\017\101\020\111\021\060" +
    "\023\114\027\057\044\076\045\064\051\067\053\056\054" +
    "\123\055\055\056\065\001\002\000\050\006\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\023\uffdb\024\uffdb\027\uffdb\044\uffdb\045\uffdb\051\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\056\uffdb\001\002\000\006\030" +
    "\246\032\121\001\002\000\044\006\106\012\110\013\077" +
    "\015\115\016\063\017\101\020\111\021\060\023\114\027" +
    "\057\044\076\045\064\051\067\053\056\054\123\055\055" +
    "\056\065\001\002\000\050\006\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\023\uffd8" +
    "\024\uffd8\027\uffd8\044\uffd8\045\uffd8\051\uffd8\053\uffd8\054" +
    "\uffd8\055\uffd8\056\uffd8\001\002\000\044\006\106\012\110" +
    "\013\077\015\115\016\063\017\101\020\111\021\060\023" +
    "\114\027\057\044\076\045\064\051\067\053\056\054\123" +
    "\055\055\056\065\001\002\000\050\006\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\023\uffd9\024\uffd9\027\uffd9\044\uffd9\045\uffd9\051\uffd9\053" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\001\002\000\030\006\106" +
    "\012\110\027\057\030\260\044\076\045\064\051\067\053" +
    "\056\054\123\055\055\056\065\001\002\000\030\006\106" +
    "\012\110\027\057\030\253\044\076\045\064\051\067\053" +
    "\056\054\123\055\055\056\065\001\002\000\006\030\255" +
    "\032\121\001\002\000\044\006\106\012\110\013\077\015" +
    "\115\016\063\017\101\020\111\021\060\023\114\027\057" +
    "\044\076\045\064\051\067\053\056\054\123\055\055\056" +
    "\065\001\002\000\050\006\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\023\uffd6\024" +
    "\uffd6\027\uffd6\044\uffd6\045\uffd6\051\uffd6\053\uffd6\054\uffd6" +
    "\055\uffd6\056\uffd6\001\002\000\044\006\106\012\110\013" +
    "\077\015\115\016\063\017\101\020\111\021\060\023\114" +
    "\027\057\044\076\045\064\051\067\053\056\054\123\055" +
    "\055\056\065\001\002\000\050\006\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\023" +
    "\uffd7\024\uffd7\027\uffd7\044\uffd7\045\uffd7\051\uffd7\053\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\001\002\000\006\030\262\032" +
    "\121\001\002\000\044\006\106\012\110\013\077\015\115" +
    "\016\063\017\101\020\111\021\060\023\114\027\057\044" +
    "\076\045\064\051\067\053\056\054\123\055\055\056\065" +
    "\001\002\000\050\006\uffd4\012\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4" +
    "\027\uffd4\044\uffd4\045\uffd4\051\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\056\uffd4\001\002\000\044\006\106\012\110\013\077" +
    "\015\115\016\063\017\101\020\111\021\060\023\114\027" +
    "\057\044\076\045\064\051\067\053\056\054\123\055\055" +
    "\056\065\001\002\000\050\006\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\023\uffd5" +
    "\024\uffd5\027\uffd5\044\uffd5\045\uffd5\051\uffd5\053\uffd5\054" +
    "\uffd5\055\uffd5\056\uffd5\001\002\000\050\006\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\023\uffd1\024\uffd1\027\uffd1\044\uffd1\045\uffd1\051\uffd1" +
    "\053\uffd1\054\uffd1\055\uffd1\056\uffd1\001\002\000\006\030" +
    "\266\032\121\001\002\000\054\022\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036" +
    "\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9" +
    "\045\uffa9\046\uffa9\047\uffa9\050\uffa9\052\uffa9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\020\002\011\003\016\004\005\005\012\006" +
    "\015\010\004\014\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\051\014\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\034" +
    "\004\005\005\012\006\015\010\004\014\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\025\012\023\014\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\032" +
    "\014\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\040\013\037\014\041\001\001\000\002\001\001\000" +
    "\006\013\047\014\041\001\001\000\004\015\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\007" +
    "\070\013\037\014\041\016\111\017\117\020\073\021\104" +
    "\022\060\023\116\024\072\025\115\027\101\030\102\031" +
    "\065\032\112\033\103\034\061\035\106\036\067\037\071" +
    "\040\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\025\264\027\101\030\102\031\065\032\112\033\103" +
    "\034\061\035\106\036\067\037\071\040\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\036\227\037\071\040\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\036\224\037\071" +
    "\040\074\001\001\000\002\001\001\000\052\013\047\014" +
    "\041\016\220\017\117\020\073\021\104\022\060\023\116" +
    "\024\072\025\115\027\101\030\102\031\065\032\112\033" +
    "\103\034\061\035\106\036\067\037\071\040\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\036\203\037\071\040\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\025\173\027" +
    "\101\030\102\031\065\032\112\033\103\034\061\035\106" +
    "\036\067\037\071\040\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\017\133\020\073\021\104\022\060" +
    "\023\116\024\072\025\115\027\101\030\102\031\065\032" +
    "\112\033\103\034\061\035\106\036\067\037\071\040\074" +
    "\001\001\000\002\001\001\000\046\016\130\017\117\020" +
    "\073\021\104\022\060\023\116\024\072\025\115\027\101" +
    "\030\102\031\065\032\112\033\103\034\061\035\106\036" +
    "\067\037\071\040\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\027" +
    "\123\030\102\031\065\032\112\033\103\034\061\035\106" +
    "\036\067\037\071\040\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\025\125\027\101" +
    "\030\102\031\065\032\112\033\103\034\061\035\106\036" +
    "\067\037\071\040\074\001\001\000\002\001\001\000\044" +
    "\017\127\020\073\021\104\022\060\023\116\024\072\025" +
    "\115\027\101\030\102\031\065\032\112\033\103\034\061" +
    "\035\106\036\067\037\071\040\074\001\001\000\002\001" +
    "\001\000\044\017\133\020\073\021\104\022\060\023\116" +
    "\024\072\025\115\027\101\030\102\031\065\032\112\033" +
    "\103\034\061\035\106\036\067\037\071\040\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\033\164\034\061\035\106\036\140\037\071\040\074" +
    "\001\001\000\022\031\163\032\112\033\103\034\061\035" +
    "\106\036\140\037\071\040\074\001\001\000\016\033\137" +
    "\034\061\035\106\036\140\037\071\040\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\034\162\035\106" +
    "\036\140\037\071\040\074\001\001\000\014\034\161\035" +
    "\106\036\140\037\071\040\074\001\001\000\014\034\160" +
    "\035\106\036\140\037\071\040\074\001\001\000\014\034" +
    "\145\035\106\036\140\037\071\040\074\001\001\000\002" +
    "\001\001\000\012\035\157\036\140\037\071\040\074\001" +
    "\001\000\012\035\150\036\140\037\071\040\074\001\001" +
    "\000\002\001\001\000\010\036\156\037\071\040\074\001" +
    "\001\000\010\036\155\037\071\040\074\001\001\000\010" +
    "\036\154\037\071\040\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\025\171\027\101\030\102\031" +
    "\065\032\112\033\103\034\061\035\106\036\067\037\071" +
    "\040\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\025\176\027\101" +
    "\030\102\031\065\032\112\033\103\034\061\035\106\036" +
    "\067\037\071\040\074\001\001\000\002\001\001\000\044" +
    "\017\200\020\073\021\104\022\060\023\116\024\072\025" +
    "\115\027\101\030\102\031\065\032\112\033\103\034\061" +
    "\035\106\036\067\037\071\040\074\001\001\000\002\001" +
    "\001\000\044\017\202\020\073\021\104\022\060\023\116" +
    "\024\072\025\115\027\101\030\102\031\065\032\112\033" +
    "\103\034\061\035\106\036\067\037\071\040\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\026\214\027" +
    "\213\030\102\031\065\032\112\033\103\034\061\035\106" +
    "\036\067\037\071\040\074\001\001\000\030\025\210\027" +
    "\101\030\102\031\065\032\112\033\103\034\061\035\106" +
    "\036\067\037\071\040\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\027" +
    "\217\030\102\031\065\032\112\033\103\034\061\035\106" +
    "\036\067\037\071\040\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\017\133\020\073\021\104\022\060" +
    "\023\116\024\072\025\115\027\101\030\102\031\065\032" +
    "\112\033\103\034\061\035\106\036\067\037\071\040\074" +
    "\001\001\000\002\001\001\000\026\027\223\030\102\031" +
    "\065\032\112\033\103\034\061\035\106\036\067\037\071" +
    "\040\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\030\226\031\065\032\112\033\103\034\061\035\106" +
    "\036\140\037\071\040\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\021\232\025\115\027\101\030\102" +
    "\031\065\032\112\033\103\034\061\035\106\036\067\037" +
    "\071\040\074\001\001\000\032\021\250\025\115\027\101" +
    "\030\102\031\065\032\112\033\103\034\061\035\106\036" +
    "\067\037\071\040\074\001\001\000\032\021\234\025\115" +
    "\027\101\030\102\031\065\032\112\033\103\034\061\035" +
    "\106\036\067\037\071\040\074\001\001\000\030\025\242" +
    "\027\101\030\102\031\065\032\112\033\103\034\061\035" +
    "\106\036\067\037\071\040\074\001\001\000\030\025\235" +
    "\027\101\030\102\031\065\032\112\033\103\034\061\035" +
    "\106\036\067\037\071\040\074\001\001\000\002\001\001" +
    "\000\044\017\237\020\073\021\104\022\060\023\116\024" +
    "\072\025\115\027\101\030\102\031\065\032\112\033\103" +
    "\034\061\035\106\036\067\037\071\040\074\001\001\000" +
    "\002\001\001\000\044\017\241\020\073\021\104\022\060" +
    "\023\116\024\072\025\115\027\101\030\102\031\065\032" +
    "\112\033\103\034\061\035\106\036\067\037\071\040\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\017" +
    "\244\020\073\021\104\022\060\023\116\024\072\025\115" +
    "\027\101\030\102\031\065\032\112\033\103\034\061\035" +
    "\106\036\067\037\071\040\074\001\001\000\002\001\001" +
    "\000\044\017\246\020\073\021\104\022\060\023\116\024" +
    "\072\025\115\027\101\030\102\031\065\032\112\033\103" +
    "\034\061\035\106\036\067\037\071\040\074\001\001\000" +
    "\002\001\001\000\030\025\256\027\101\030\102\031\065" +
    "\032\112\033\103\034\061\035\106\036\067\037\071\040" +
    "\074\001\001\000\030\025\251\027\101\030\102\031\065" +
    "\032\112\033\103\034\061\035\106\036\067\037\071\040" +
    "\074\001\001\000\002\001\001\000\044\017\253\020\073" +
    "\021\104\022\060\023\116\024\072\025\115\027\101\030" +
    "\102\031\065\032\112\033\103\034\061\035\106\036\067" +
    "\037\071\040\074\001\001\000\002\001\001\000\044\017" +
    "\255\020\073\021\104\022\060\023\116\024\072\025\115" +
    "\027\101\030\102\031\065\032\112\033\103\034\061\035" +
    "\106\036\067\037\071\040\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\017\260\020\073\021\104\022" +
    "\060\023\116\024\072\025\115\027\101\030\102\031\065" +
    "\032\112\033\103\034\061\035\106\036\067\037\071\040" +
    "\074\001\001\000\002\001\001\000\044\017\262\020\073" +
    "\021\104\022\060\023\116\024\072\025\115\027\101\030" +
    "\102\031\065\032\112\033\103\034\061\035\106\036\067" +
    "\037\071\040\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void reportError(String message, Object info) {
        final StringBuffer m = new StringBuffer("Parsing error");
        if (info instanceof java_cup.runtime.Symbol) {
            final java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
            if (s.left >= 0) {
                m.append(" in line " + (s.left + 1));
                if (s.right >= 0) {
                    m.append(", column " + (s.right + 1));
                }
            }
        }
        m.append(" : " + message);
        System.err.println(m);
    }
    
    public void reportFatalError(String message, Object info) {
        reportError(message, info);
        System.exit(1);
    }
    
    public Parser(InputStream inStream) {
        this(new Yylex(inStream));
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    static javac.symbol.Symbol sym(String s) {
        return javac.symbol.Symbol.valueOf(s);
    }
    
    static javac.util.Position pos(int line, int column) {
        return javac.util.Position.valueOf(line, column);
    }

    static boolean canTileLeft(Expr a,Expr b,BinaryOp op){
    	BinaryExpr l=null,r=null;
    	if(op!=BinaryOp.PLUS&&op!=BinaryOp.MULTIPLY)return false;
    	if(a instanceof BinaryExpr){
    		l=(BinaryExpr)a;
    	}
    	if(b instanceof BinaryExpr){
    		r=(BinaryExpr)b;
    	}
    	if(l!=null&&l.op==op){
    		return true;
    	}else
    		return false;
    }
    static boolean canTileRight(Expr a,Expr b,BinaryOp op){
    	BinaryExpr l=null,r=null;
    	if(op!=BinaryOp.PLUS&&op!=BinaryOp.MULTIPLY)return false;
    	if(a instanceof BinaryExpr){
    		l=(BinaryExpr)a;
    	}
    	if(b instanceof BinaryExpr){
    		r=(BinaryExpr)b;
    	}
    	if(r!=null&&r.op==op){
    		return true;
    	}else
    		return false;
    }
    void enterFunction(){
    	env=new javac.env.Env();
    }
        javac.env.Env env;//TODO:for type inference

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // primary ::= NEW type_specifier 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NewRecord(pos(tleft, tright), t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // primary ::= NEW type_specifier LBRACKET expr RBRACKET 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NewArray(pos(eleft, eright), t, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // primary ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // primary ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringLiteral(pos(sleft, sright), s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // primary ::= CHARACTER 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharLiteral(pos(cleft, cright), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // primary ::= INTEGER 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntLiteral(pos(ileft, iright), i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // primary ::= NULL 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Null(pos(nleft, nright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // primary ::= ID 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				javac.env.Entry tmpe=env.getWithoutException(sym(i));
				if(tmpe!=null)RESULT = new Id(pos(ileft, iright), sym(i),((javac.env.VarEntry)tmpe).type);
		 		else RESULT = new Id(pos(ileft, iright), sym(i));
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // postfix ::= postfix DOT ID 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FieldPostfix(pos(pleft, pright), p, sym(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // postfix ::= postfix LPAREN RPAREN 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FunctionCall(pos(pleft, pright), p, new ArgsList(pos(pleft,pright))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // postfix ::= postfix LPAREN args_list RPAREN 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArgsList e = (ArgsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCall(pos(pleft, pright), p, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // postfix ::= postfix LBRACKET expr RBRACKET 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SubscriptPostfix(pos(pleft, pright), p, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // postfix ::= primary 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // args_list ::= args_list COMMA assignment_expr 
            {
              ArgsList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArgsList c = (ArgsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=c;RESULT.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // args_list ::= assignment_expr 
            {
              ArgsList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgsList(pos(eleft,eright)); RESULT.add(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unary_expr ::= NOT unary_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(pos(aleft,aright),UnaryOp.NOT,a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unary_expr ::= MINUS unary_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(pos(aleft,aright),UnaryOp.MINUS,a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unary_expr ::= PLUS unary_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(pos(aleft,aright),UnaryOp.PLUS,a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unary_expr ::= postfix 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // mult_expr ::= mult_expr MODULO unary_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(aleft,aright),a,BinaryOp.MODULO,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mult_expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // mult_expr ::= mult_expr DIVIDE unary_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(aleft,aright),a,BinaryOp.DIVIDE,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mult_expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // mult_expr ::= mult_expr MULTIPLY unary_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(aleft,aright),a,BinaryOp.MULTIPLY,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mult_expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // mult_expr ::= unary_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mult_expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // additive_expr ::= additive_expr MINUS mult_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(aleft,aright),a,BinaryOp.MINUS,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // additive_expr ::= additive_expr PLUS mult_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(aleft,aright),a,BinaryOp.PLUS,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // additive_expr ::= mult_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relational_expr ::= relational_expr GREATER_EQ additive_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(aleft,aright),a,BinaryOp.GREATER_EQ,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // relational_expr ::= relational_expr GREATER additive_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(aleft,aright),a,BinaryOp.GREATER,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // relational_expr ::= relational_expr LESS_EQ additive_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(aleft,aright),a,BinaryOp.LESS_EQ,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // relational_expr ::= relational_expr LESS additive_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(aleft,aright),a,BinaryOp.LESS,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relational_expr ::= additive_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // equality_expr ::= equality_expr NEQ relational_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(aleft,aright),a,BinaryOp.NEQ,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // equality_expr ::= equality_expr EQ relational_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(eleft,eright),e,BinaryOp.EQ,r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // equality_expr ::= relational_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // logical_and_expr ::= equality_expr AND logical_and_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new BinaryExpr(pos(eleft,eright),e,BinaryOp.AND,a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // logical_and_expr ::= equality_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logical_or_expr ::= logical_and_expr OR logical_or_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(aleft,aright),a,BinaryOp.OR,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logical_or_expr ::= logical_and_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assignment_expr ::= unary_expr ASSIGN assignment_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(eleft,eright),e,BinaryOp.ASSIGN,a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assignment_expr ::= logical_or_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr COMMA assignment_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(pos(eleft,eright),e,BinaryOp.COMMA,a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= assignment_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // jump_stmt ::= CONTINUE SEMICOLON 
            {
              Stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ContinueStmt(pos(aleft,aright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // jump_stmt ::= BREAK SEMICOLON 
            {
              Stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BreakStmt(pos(aleft,aright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // jump_stmt ::= RETURN expr SEMICOLON 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnStmt(pos(eleft,eright),e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // iteration_stmt ::= FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt d = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new ForStmt(pos(fleft,fright),null,new IntLiteral(pos(sleft,sright),1),null,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // iteration_stmt ::= FOR LPAREN SEMICOLON SEMICOLON expr RPAREN stmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt d = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new ForStmt(pos(fleft,fright),null,new IntLiteral(pos(sleft,sright),1),c,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // iteration_stmt ::= FOR LPAREN SEMICOLON expr_stmt RPAREN stmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprStmt b = (ExprStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt d = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new ForStmt(pos(fleft,fright),null,b.getExpr(),null,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // iteration_stmt ::= FOR LPAREN SEMICOLON expr_stmt expr RPAREN stmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExprStmt b = (ExprStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt d = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new ForStmt(pos(fleft,fright),null,b.getExpr(),c,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // iteration_stmt ::= FOR LPAREN expr_stmt SEMICOLON RPAREN stmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExprStmt a = (ExprStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt d = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new ForStmt(pos(fleft,fright),a.getExpr(),new IntLiteral(pos(sleft,sright),1),null,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // iteration_stmt ::= FOR LPAREN expr_stmt SEMICOLON expr RPAREN stmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExprStmt a = (ExprStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt d = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new ForStmt(pos(fleft,fright),a.getExpr(),new IntLiteral(pos(sleft,sright),1),c,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // iteration_stmt ::= FOR LPAREN expr_stmt expr_stmt RPAREN stmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExprStmt a = (ExprStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprStmt b = (ExprStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt d = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new ForStmt(pos(fleft,fright),a.getExpr(),b.getExpr(),null,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // iteration_stmt ::= FOR LPAREN expr_stmt expr_stmt expr RPAREN stmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExprStmt a = (ExprStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExprStmt b = (ExprStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt d = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new ForStmt(pos(fleft,fright),a.getExpr(),b.getExpr(),c,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // iteration_stmt ::= WHILE LPAREN expr RPAREN stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new WhileStmt(pos(eleft,eright),e,s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // selection_stmt ::= IF LPAREN expr RPAREN stmt ELSE stmt 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt a = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt b = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new IfStmt(pos(eleft,eright),e,a,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // selection_stmt ::= IF LPAREN expr RPAREN stmt 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new IfStmt(pos(eleft,eright),e,s,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_stmt ::= expr SEMICOLON 
            {
              ExprStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new ExprStmt(pos(eleft,eright),e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // compound_stmt ::= LBRACE RBRACE 
            {
              CompoundStmt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new CompoundStmt(pos(lleft,lright),new StmtList(pos(lleft,lright))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // compound_stmt ::= LBRACE stmt_list RBRACE 
            {
              CompoundStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new CompoundStmt(pos(sleft,sright),s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= jump_stmt 
            {
              Stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt a = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= iteration_stmt 
            {
              Stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt a = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= selection_stmt 
            {
              Stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfStmt a = (IfStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= expr_stmt 
            {
              Stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprStmt a = (ExprStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= compound_stmt 
            {
              Stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompoundStmt a = (CompoundStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt_list ::= stmt_list stmt 
            {
              StmtList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList a = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt b = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= a;RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt_list ::= stmt 
            {
              StmtList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmtList(pos(sleft,sright)); RESULT.add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // id_list ::= id_list COMMA ID 
            {
              IdList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdList a = (IdList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= a; RESULT.add(sym(b)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // id_list ::= ID 
            {
              IdList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new IdList(pos(ileft,iright)); RESULT.add(sym(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_specifier ::= type_specifier LRBRACKET 
            {
              TypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayType(pos(tleft,tright),t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_specifier ::= ID 
            {
              TypeSpecifier RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdType(pos(aleft,aright),sym(a)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_specifier ::= CHAR 
            {
              TypeSpecifier RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharType(pos(aleft,aright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_specifier ::= STRING 
            {
              TypeSpecifier RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringType(pos(aleft,aright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_specifier ::= INT 
            {
              TypeSpecifier RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntType(pos(aleft,aright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variable_decl ::= type_specifier id_list SEMICOLON 
            {
              VariableDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdList i = (IdList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
			RESULT = new VariableDecl(pos(ileft,iright),t,i); 
			if(env==null)env=new javac.env.Env();
            javac.type.Type type =(t instanceof IdType||t instanceof ArrayType)?null:t.toType(env);
            for (javac.symbol.Symbol s : i.ids)env.put(s, new javac.env.VarEntry(s, type));
            

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_decl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parameter_decl ::= type_specifier ID 
            {
              ParameterDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new ParameterDecl(pos(ileft,iright),t,sym(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_decl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameter_list ::= parameter_list COMMA parameter_decl 
            {
              ParameterList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParameterList a = (ParameterList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterDecl b = (ParameterDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameter_list ::= parameter_decl 
            {
              ParameterList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterDecl p = (ParameterDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParameterList(pos(pleft,pright));RESULT.add(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function_head ::= type_specifier ID LPAREN RPAREN 
            {
              FunctionHead RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new FunctionHead(pos(ileft,iright),t,sym(i),new ParameterList(pos(lleft,lright)));enterFunction(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_head",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function_head ::= type_specifier ID LPAREN parameter_list RPAREN 
            {
              FunctionHead RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParameterList p = (ParameterList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new FunctionHead(pos(ileft,iright),t,sym(i),p);enterFunction(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_head",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable_decl_list ::= variable_decl_list variable_decl 
            {
              VariableDeclList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VariableDeclList a = (VariableDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VariableDecl b = (VariableDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_decl_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable_decl_list ::= variable_decl 
            {
              VariableDeclList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VariableDecl v = (VariableDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new VariableDeclList(pos(vleft,vright));RESULT.add(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_decl_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // record_def ::= RECORD ID LBRACE variable_decl_list RBRACE 
            {
              RecordDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VariableDeclList v = (VariableDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 v.inRecord=true; RESULT=new RecordDef(pos(ileft,iright),sym(i),v);enterFunction(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_def",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_def ::= function_head LBRACE stmt_list RBRACE 
            {
              FunctionDef RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		FunctionHead h = (FunctionHead)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new FunctionDef(pos(hleft,hright),h,new VariableDeclList(pos(lleft,lright)),s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_def ::= function_head LBRACE variable_decl_list stmt_list RBRACE 
            {
              FunctionDef RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		FunctionHead h = (FunctionHead)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VariableDeclList v = (VariableDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new FunctionDef(pos(hleft,hright),h,v,s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // prototype_decl ::= NATIVE function_head SEMICOLON 
            {
              PrototypeDecl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionHead f = (FunctionHead)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new PrototypeDecl(pos(fleft,fright),f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prototype_decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // external_decl ::= record_def 
            {
              ExternalDecl RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RecordDef r = (RecordDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // external_decl ::= function_def 
            {
              ExternalDecl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDef f = (FunctionDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // external_decl ::= prototype_decl 
            {
              ExternalDecl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PrototypeDecl p = (PrototypeDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // translation_unit ::= translation_unit external_decl 
            {
              TranslationUnit RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TranslationUnit t = (TranslationUnit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExternalDecl e = (ExternalDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; t.add(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("translation_unit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // translation_unit ::= external_decl 
            {
              TranslationUnit RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExternalDecl e = (ExternalDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TranslationUnit(pos(eleft, eright)); RESULT.add(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("translation_unit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= translation_unit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TranslationUnit start_val = (TranslationUnit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

